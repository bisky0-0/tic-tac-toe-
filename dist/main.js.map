{"version":3,"file":"main.js","mappings":"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","sources":["webpack://tic-tac-toe/./src/js/state.js","webpack://tic-tac-toe/./src/js/board.js","webpack://tic-tac-toe/./src/js/events.js","webpack://tic-tac-toe/./src/js/domElements.js","webpack://tic-tac-toe/./src/js/winner.js","webpack://tic-tac-toe/./src/js/botLogic.js","webpack://tic-tac-toe/./src/js/utils.js","webpack://tic-tac-toe/./src/js/moves.js","webpack://tic-tac-toe/./src/js/gameModes.js","webpack://tic-tac-toe/./src/js/player.js","webpack://tic-tac-toe/./src/js/game.js","webpack://tic-tac-toe/./src/js/index.js"],"sourcesContent":["export let stopFun = false;\nexport let choosenLevel;\n\nexport const setStopFun = (value) => {\n    stopFun = value;\n};\n\nexport const setLevel = (level) => {\n    return choosenLevel = level;\n}","import { setStopFun } from \"./state\";\nexport const BoardArea = (number, content, chicked) => ({ number, content, chicked });\n\nexport const chickedAreas = Array.from(document.getElementsByClassName(\"board-areas\"));\nexport let areasArray = Array.from(document.getElementsByClassName(\"board-areas\"));\nexport let completeAreasArray;\n\n\nexport const resetBoardAreas = () => {\n    setStopFun(false)\n    chickedAreas.forEach((area) => {\n        area.content = '';\n        area.chicked = false\n    });\n\n    areasArray = Array.from(document.getElementsByClassName(\"board-areas\"));\n\n    Array.from(document.getElementsByClassName(\"board-areas\")).forEach(area => {\n        area.classList.remove('x', 'o')\n        area.textContent = '';\n        area.style.animation = '';\n        area.style.textShadow = ''\n    })\n};\n\nexport const updateBoardArea = (index, content, isChicked) => {\n    chickedAreas[index] = BoardArea(index, content, isChicked);\n};\n\nexport const findBoardAreaIndex = (elem) => {\n    return Array.from(document.getElementsByClassName(\"board-areas\")).\n        findIndex(area => area.dataset.key === elem.dataset.key);\n};\n","import { resetBoardAreas } from './board.js';\n\nexport const openNav = () => {\n    document.getElementById(\"nav\").style.cssText = \"width: 100%; font-size: 1rem\";\n    document.getElementById(\"nav-icon\").style.display = 'none';\n    document.getElementById(\"close-icon\").style.display = 'block';\n};\n\nexport const closeNav = () => {\n    document.getElementById(\"nav\").style.cssText = \"width: 0; font-size: 0rem\";\n    document.getElementById(\"nav-icon\").style.display = 'block';\n    document.getElementById(\"close-icon\").style.display = 'none';\n};\n\nexport const resetBoard = () => {\n    resetBoardAreas();\n};\n","export const weaponsCard = document.getElementById(\"weapons\");\nexport const weaponsWindow = document.getElementById(\"first-window\");\nexport const weapons = document.getElementsByClassName(\"weapon\");\nexport const openIcon = document.getElementById(\"nav-icon\");\nexport const closeIcon = document.getElementById(\"close-icon\");\nexport const navBar = document.getElementById(\"nav\");\nexport const levels = document.getElementsByClassName(\"level\");\nexport const boardAreas = document.getElementsByClassName(\"board-areas\");\nexport const oScore = document.getElementById(\"o-scores\");\nexport const xScore = document.getElementById(\"x-scores\");\nexport const restart = document.getElementById(\"restart\");\n","import { chickedAreas, updateBoardArea, completeAreasArray } from './board.js';\nimport { boardAreas, oScore, xScore } from './domElements.js';\nimport { stopFun, setStopFun } from './state.js';\nimport { bot } from './game.js';\n\nexport const winningArray = [\n    [0, 1, 2], [3, 4, 5], [6, 7, 8],\n    [0, 4, 8], [0, 3, 6], [1, 4, 7],\n    [2, 5, 8], [2, 4, 6]\n];\n\nexport const chasing = (array, player) => {\n    array.forEach(pattern => {\n        if (!stopFun) {\n            let result = pattern.filter(index => chickedAreas[index].content === player.weapon);\n            if (result.length === 2) {\n                let botMove = pattern.find(index => chickedAreas[index].content === \"\");\n                if (botMove !== undefined && !chickedAreas[botMove].chicked) {\n                    updateBoardArea(botMove, bot.weapon, true);\n                    boardAreas[botMove].textContent = bot.weapon;\n                    boardAreas[botMove].classList.add(bot.weapon);\n                    setStopFun(true);\n                }\n            }\n        }\n    });\n};\n\nexport const checkForWinner = (user, bot) => {\n    completeAreasArray = Array.from(boardAreas);\n    winningArray.forEach(pattern => {\n        let userWin = pattern.every(index => chickedAreas[index].content === user.weapon);\n        let botWin = pattern.every(index => chickedAreas[index].content === bot.weapon);\n\n        if (userWin || botWin) {\n            setStopFun(true);\n            pattern.forEach(index => {\n                completeAreasArray[index].style.cssText = `\n                    animation: anim-popoutin 0.5s linear 0s 5 alternate;\n                    text-shadow: 1px 1px 60px #fff\n                `;\n            });\n            if (userWin) {\n                user.score++;\n                xScore.textContent = user.score;\n                styleWinnerElements(bot.weapon);\n                setTimeout(() => {\n                    alert('You Won!')\n                }, 2000)\n            } else {\n                bot.score++;\n                oScore.textContent = bot.score;\n                styleWinnerElements(user.weapon);\n                setTimeout(() => {\n                    alert(`Bot Won!, you're a shame to humanity!`)\n                }, 2000)\n            }\n            chickedAreas.forEach(area => area.chicked = true);\n        }\n    });\n\n    if (!stopFun && chickedAreas.every(area => area.chicked)) {\n        stopFun = true;\n        setTimeout(() => {\n            alert(`It's a draw!`);\n        }, 2000)\n    }\n};\n\nconst styleWinnerElements = (loserWeapon) => {\n    completeAreasArray.forEach(element => {\n        if (element.textContent === loserWeapon) {\n            element.style.cssText = `\n                text-shadow: 0.5px 0.5px 10px ${loserWeapon === \"x\" ?\n                    \"#FD49A0,-0.7px -0.7px 5px #ff84bf\" : \"#BBE7FE,-0.7px -0.7px 5px #d2efff\"}\n            `;\n        }\n    });\n};\n","import { updateBoardArea, findBoardAreaIndex } from './board.js';\nimport { random } from './utils.js';\nimport { areasArray } from './board.js';\nimport { checkForWinner, winningArray } from './winner.js';\nimport { user, bot } from './game.js';\nimport { chickedAreas } from './board.js';\nimport { boardAreas } from './domElements.js';\nimport { setStopFun } from './state.js';\n\nexport const userMove = (area, i, user) => {\n    area.textContent = user.weapon;\n    area.classList.add(user.weapon);\n    updateBoardArea(i, user.weapon, true);\n    areasArray = areasArray.filter(a => a !== area);\n    checkForWinner(user, bot);\n};\n\nexport const botMove = (bot) => {\n    let randomNum = random(areasArray.length);\n    let botMoveArea = areasArray[randomNum];\n    const index = findBoardAreaIndex(botMoveArea);\n    botMoveArea.textContent = bot.weapon;\n    botMoveArea.classList.add(bot.weapon);\n    updateBoardArea(index, bot.weapon, true);\n    areasArray = areasArray.filter(a => a !== botMoveArea);\n    checkForWinner(user, bot);\n};\n\nexport const firstBotMove = (bot) => {\n    if (!chickedAreas[4].chicked) {\n        updateBoardArea(4, bot.weapon, true);\n        boardAreas[4].textContent = bot.weapon;\n        boardAreas[4].classList.add(bot.weapon);\n    } else {\n        updateBoardArea(0, bot.weapon, true);\n        boardAreas[0].textContent = bot.weapon;\n        boardAreas[0].classList.add(bot.weapon);\n    }\n};\n\nexport const makeRandomMove = (bot) => {\n    for (let ele of winningArray.flat()) {\n        if (!chickedAreas[ele].chicked) {\n            updateBoardArea(ele, bot.weapon, true);\n            boardAreas[ele].textContent = bot.weapon;\n            boardAreas[ele].classList.add(bot.weapon);\n            setStopFun(true);\n            break;\n        }\n    }\n};\n","export const random = num => Math.floor(Math.random() * num);\n","import { userMove, botMove, firstBotMove, makeRandomMove } from './botLogic.js';\nimport { checkForWinner, chasing, winningArray } from './winner.js';\nimport { updateBoardArea, chickedAreas, areasArray } from './board.js';\nimport { setStopFun, stopFun } from './state.js';\n\nlet num = 0;\nlet step = 1;\n\nexport const handleTwoPlayers = (area, i, user, bot) => {\n    if (!chickedAreas[i].chicked) {\n        // Alternate between the two players based on the turn number\n        const currentPlayer = (num % 2 === 0) ? user : bot;\n        area.textContent = currentPlayer.weapon;\n        updateBoardArea(i, currentPlayer.weapon, true);\n        area.classList.add(currentPlayer.weapon);\n        num++;\n        checkForWinner(user, bot);\n    }\n};\n\n\nexport const handleEasyMode = (area, i, user, bot) => {\n    console.log('easy')\n    if (!chickedAreas[i].chicked) {\n        userMove(area, i, user);\n        if (!stopFun && areasArray.length > 0) {\n            botMove(bot);\n        }\n    }\n};\n\nexport const handleHardMode = (area, i, user, bot) => {\n    console.log('hard')\n    if (!chickedAreas[i].chicked) {\n        userMove(area, i, user);\n        if (step === 1) {\n            firstBotMove(bot);\n            step = 0;\n        } else {\n            checkForWinner(user, bot);\n            chasing(winningArray, bot);\n            if (!stopFun) chasing(winningArray, user);\n            if (!stopFun) makeRandomMove(bot);\n            checkForWinner(user, bot);\n            setStopFun(false);\n        }\n    }\n};\n","import { handleTwoPlayers, handleEasyMode, handleHardMode } from './moves.js';\nimport { chickedAreas, BoardArea } from './board.js';\nimport { choosenLevel } from './state.js';\n\nexport const initializeGameModes = (user, bot) => {\n    console.log(choosenLevel)\n    Array.from(document.getElementsByClassName(\"board-areas\")).forEach((area, i) => {\n        chickedAreas[i] = BoardArea(i, \"\", false);\n        area.addEventListener('click', () => {\n            console.log(choosenLevel)\n            if (chickedAreas[i].chicked) return;\n            if (choosenLevel === \"twoplayers\") {\n                handleTwoPlayers(area, i, user, bot);\n            } else if (choosenLevel === \"easy\") {\n                handleEasyMode(area, i, user, bot);\n            } else if (choosenLevel === \"hard\") {\n                handleHardMode(area, i, user, bot);\n            }\n        });\n    });\n};\n","export const Player = (name, weapon, score) => ({ name, weapon, score });\n","import { initializeGameModes } from './gameModes.js';\nimport { resetBoard, closeNav, openNav } from './events.js';\nimport { Player } from './player.js';\nimport { choosenLevel, setLevel } from './state.js';\n\nlet choosenWeapon;\nexport let user;\nexport let bot;\n\nexport const initializeGame = () => {\n    Array.from(document.getElementsByClassName(\"weapon\")).forEach(weapon => {\n        weapon.addEventListener('click', () => {\n            document.getElementById(\"first-window\").style.display = \"none\";\n            openNav();\n            choosenWeapon = weapon.dataset.type;\n            user = Player(choosenWeapon, choosenWeapon, 0);\n            bot = Player(user.weapon === \"x\" ? \"o\" : \"x\", user.weapon === \"x\" ? \"o\" : \"x\", 0);\n        });\n    });\n\n    Array.from(document.getElementsByClassName(\"level\")).forEach(level => {\n        level.addEventListener('click', () => {\n            console.log(level.dataset.type)\n            setLevel(level.dataset.type);\n            console.log(choosenLevel)\n            resetBoard();\n            closeNav();\n            initializeGameModes(user, bot);\n            if (choosenLevel === \"chooseWeapon\") {\n                document.getElementById(\"first-window\").style.display = \"flex\";\n            }\n        });\n    });\n\n    resetBoard();\n    document.getElementById(\"x-scores\").textContent = \"0\";\n    document.getElementById(\"o-scores\").textContent = \"0\";\n};\n","import { openNav, closeNav, resetBoard } from './events.js';\nimport { initializeGame } from './game.js';\n\ndocument.getElementById(\"nav-icon\").addEventListener('click', openNav);\ndocument.getElementById(\"close-icon\").addEventListener('click', closeNav);\ndocument.getElementById(\"restart\").addEventListener('click', resetBoard);\n\ninitializeGame();\n"],"names":["choosenLevel","stopFun","setStopFun","value","BoardArea","number","content","chicked","chickedAreas","Array","from","document","getElementsByClassName","completeAreasArray","areasArray","updateBoardArea","index","isChicked","openNav","getElementById","style","cssText","display","closeNav","resetBoard","forEach","area","classList","remove","textContent","animation","textShadow","boardAreas","oScore","xScore","winningArray","chasing","array","player","pattern","filter","weapon","length","botMove","find","undefined","bot","add","checkForWinner","user","userWin","every","botWin","score","styleWinnerElements","setTimeout","alert","loserWeapon","element","userMove","i","a","randomNum","num","Math","floor","random","botMoveArea","elem","findIndex","dataset","key","step","initializeGameModes","console","log","addEventListener","currentPlayer","handleTwoPlayers","handleEasyMode","firstBotMove","ele","flat","makeRandomMove","handleHardMode","Player","name","choosenWeapon","type","level","setLevel"],"sourceRoot":""}